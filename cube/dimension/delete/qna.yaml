version: 3
created_by: GMC2alg
domain: turbointegrator
seed_examples:
  - context: "This TI deletes a dimension from a cube that has already been built
      with the ability to preserve data. Use case: Intended for
      development/prototyping. Rebuild existing cube with the removal of one
      dimension without losing all the data. Note: Naturally, a valid cube name
      (pCube) is mandatory otherwise the process will abort. Also, a valid
      dimension name (pDim) is mandatory otherwise the process will abort. If
      data needs to be kept (using pIncludeData), data from pDim will be summed.
      Rule can be kept as backup file only or reloaded back."
    questions_and_answers:
      - question: What is the main purpose of this TI process?
        answer: The main purpose of this TI process is to delete a dimension from a cube
          that has already been built, while preserving the existing data.
      - question: What is required for the TI process to proceed?
        answer: A valid cube name (pCube) and a valid dimension name (pDim) are
          mandatory, otherwise the process will abort.
      - question: Can the TI process retain data after removing a dimension?
        answer: Yes, if pIncludeData is specified, data from the dimension (pDim) to be
          removed will be summed and preserved.
  - context: Global Variables in the TI process include sProcessReturnCode and
      nProcessReturnCode, with nProcessReturnCode initially set to 0. Constants
      such as cThisProcName, cUserName, and timestamps are used for process
      identification. The process checks the operating system with sOS and
      sOSDelim to appropriately format paths and filenames.
    questions_and_answers:
      - question: What is the purpose of global variables in this TI process?
        answer: Global variables are used for managing the process's return codes and
          maintaining consistent process identification and logging.
      - question: How does the TI process determine the operating system?
        answer: The process checks the directory path format using functions and sets
          sOS and sOSDelim based on the identified operating system (Windows or
          Linux).
      - question: What is nProcessReturnCode initially set to?
        answer: The nProcessReturnCode is initially set to 0.
  - context: The TI process validates parameters such as the cube's existence and
      the dimension's existence before proceeding. It incrementally builds
      strings to check and recreate dimensions while checking for errors. It
      includes logic to handle system cubes and count dimensions.
    questions_and_answers:
      - question: How does the TI process handle invalid cube or dimension names?
        answer: The process logs an error and increments the error count to stop further
          execution if invalid cube or dimension names are detected.
      - question: What happens if a system cube is attempted to be modified?
        answer: The process logs an error stating that system cubes should not be
          modified and increments the error count.
      - question: How many dimensions can the process handle before requiring
          modification?
        answer: The process can handle up to 27 dimensions without modification.
  - context: The process includes steps for unloading cube rules, cloning cubes,
      recreating cubes, and copying back data if specified. It handles errors at
      each step and logs necessary error messages to ensure integrity in cube
      modifications.
    questions_and_answers:
      - question: What does the TI process do before recreating a cube?
        answer: Before recreating a cube, the process unloads any existing cube rules if
          specified.
      - question: How is data preserved during the cube modification process?
        answer: Data is preserved by cloning the cube and then copying back the data
          after the cube has been recreated without the specified dimension.
      - question: What happens if an error occurs during the cloning or recreating
          process?
        answer: The process logs the error and either quits or breaks based on strict
          error handling settings to prevent further execution.
  - context: Post cube modification, the process either reloads rules or manages
      errors related to rule files. The completion of the process is determined
      based on errors and logged actions, ensuring error-free operations or
      descriptive logs on failure.
    questions_and_answers:
      - question: When are cube rules reloaded during this TI process?
        answer: Cube rules are reloaded after the cube has been modified and recreated
          without the specified dimension, if the settings dictate reloading.
      - question: How does the process handle situations with unresolved errors?
        answer: The process logs all errors encountered and prevents further execution
          to avoid detrimental effects.
      - question: What is logged if the process completes successfully?
        answer: A success message stating that the dimension was successfully deleted
          from the cube is logged.
document_outline: The document outlines the procedure and logic used in an IBM
  Turbo Integrator Process to delete a dimension from an existing cube while
  preserving data and handling rules, for development and prototyping purposes.
document:
  repo: https://github.com/GMC2alg/bedrockti.git
  commit: 8c3ed2fbaa5674f3c984a9ed08a1c51f77c2b271
  patterns:
    - processes/}bedrock.cube.dimension.delete.ti