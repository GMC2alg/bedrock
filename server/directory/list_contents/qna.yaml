version: 3
created_by: GMC2alg
domain: turbointegrator
seed_examples:
  - context: "This process will list all files and processes in the data directory
      as text file output in the data directory itself. Use case: Intended for
      production. The TI first creates a batch file that lists different types
      of objects separately and then executes it. The batch file is deleted in
      Epilog."
    questions_and_answers:
      - question: What is the primary function of this Turbo Integrator process?
        answer: The primary function is to list all files and processes in the data
          directory and output the result as a text file in the same directory.
      - question: What does the TI process do with the batch file after execution?
        answer: The batch file is deleted in the Epilog section of the TI process.
      - question: Is this TI process suitable for production environments?
        answer: Yes, this process is intended for use in production environments.
  - context: The TI creates a batch file that will list all the different types of
      objects separately and then executes it. In some cases, the path to the
      batch file must be fully qualified.
    questions_and_answers:
      - question: Why does the TI process create a batch file?
        answer: The TI process creates a batch file to separately list all different
          types of objects and execute the listing command.
      - question: When must the path to the batch file be fully qualified?
        answer: The path must be fully qualified in some cases to ensure correct
          execution of the batch file.
      - question: Can the batch file execution be customized for different operating
          systems?
        answer: Yes, the batch file execution commands are customized based on the
          operating system, either Windows or Linux.
  - context: Global variables like sProcessReturnCode and nProcessReturnCode are
      used alongside constants such as cThisProcName and cUserName to manage
      process execution and error logging.
    questions_and_answers:
      - question: What is the purpose of using global variables in this TI script?
        answer: Global variables are used to manage and track the process execution
          status and return codes.
      - question: How are errors logged in this TI process?
        answer: Errors are logged using constants like cMsgErrorLevel and
          cMsgErrorContent which help format error messages.
      - question: What constants are used in this script for execution tracking?
        answer: Constants like cThisProcName (process name) and cUserName (user
          executing the process) are used for tracking.
  - context: ASCIIOUTPUT and ExecuteCommand functions are used to create and execute
      batch files, with command differences for Windows and Linux environments.
    questions_and_answers:
      - question: What function is used to add content to the batch file in this TI
          process?
        answer: The ASCIIOUTPUT function is used to write commands to the batch file.
      - question: How does the TI process execute commands on Linux systems?
        answer: On Linux, the execute command is prefixed with 'sh' to run the shell
          script (e.g., 'sh <script_name>').
      - question: Why are different commands used for Windows and Linux systems in this
          script?
        answer: Different commands are used to accommodate the syntax and operational
          differences between Windows batch files and Linux shell scripts.
  - context: The TI script checks for errors, executes batch files if no errors are
      found, and deletes the batch file after execution. If errors are present,
      a warning is logged with an option for strict error handling.
    questions_and_answers:
      - question: What happens if the script encounters errors during execution?
        answer: If errors are encountered, they are logged, and if strict error handling
          is enabled, the process will terminate.
      - question: What does the script do with the batch file after executing the
          commands?
        answer: After execution, the batch file is deleted to clean up temporary files.
      - question: Is there a way to enforce strict error handling in this TI process?
        answer: Yes, setting the pStrictErrorHandling parameter to 1 enforces strict
          error handling, causing the process to quit on errors.
document_outline: This document provides an overview of a Turbo Integrator
  script designed for listing files and processes in a data directory. It
  includes details on batch file creation and execution, error handling, and
  output management for production environments.
document:
  repo: https://github.com/GMC2alg/bedrockti.git
  commit: 8c3ed2fbaa5674f3c984a9ed08a1c51f77c2b271
  patterns:
    - processes/}bedrock.server.dir.listcontents.ti
