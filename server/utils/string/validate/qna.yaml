version: 3
created_by: GMC2alg
domain: turbointegrator
seed_examples:
  - context: "This process will validate a string pInputString based on rules in
      pChanges and change or eliminate characters to create a global variable
      sOutputString that can be used in the source TI. Note: - pInputString:
      This is the input string that needs to be validated based on file system
      limitations or undesirable 1st characters. - pUndesirableFileSystem: These
      are characters considered undesirable (even forbidden) in object/element
      names due to file system limitations of the operation system. -
      pUndesirable1st: These are characters considered undesirable as 1st
      characters in object/element names due to TM1 limitations."
    questions_and_answers:
      - question: What is the purpose of the process involving pInputString and pChanges?
        answer: The process validates a string pInputString based on rules in pChanges
          and changes or eliminates characters to create a global variable
          sOutputString that can be used in the source TI.
      - question: What are pUndesirableFileSystem and pUndesirable1st in this context?
        answer: pUndesirableFileSystem are characters considered undesirable in
          object/element names due to file system limitations, while
          pUndesirable1st are characters undesirable as first characters due to
          TM1 limitations.
      - question: What kind of limitations influence pInputString validation?
        answer: pInputString validation is influenced by file system limitations or
          undesirable first characters.
  - context: "pChanges: This string defines the rule of how to change undesirable
      characters. It can be made up of many definitions delimited by pDelim
      (e.g., '&') which is not considered undesirable anywhere. Each definition
      would contain a character considered undesirable and the desired character
      separated by pSeperator (e.g., to change a '%' to 'Percentage' and ' to
      'inches', it would be '%,Percentage&',inches' if pDelim = '&' and
      pSeperator = ',')."
    questions_and_answers:
      - question: How is pChanges structured in this process?
        answer: pChanges is structured as a string that defines how to change
          undesirable characters, containing definitions delimited by pDelim and
          each definition having a character considered undesirable and the
          desired character separated by pSeperator.
      - question: Can you provide an example of a transformation rule in pChanges?
        answer: Yes, for instance, to change a '%' to 'Percentage' and "'" to 'inches',
          the string would be '%,Percentage&',inches' if pDelim = '&' and
          pSeperator = ','.
      - question: What do pDelim and pSeperator represent in this context?
        answer: pDelim is a character used to separate definitions in pChanges, and
          pSeperator is a character used to separate the current and desired
          character within each definition in pChanges.
  - context: "pReplaceIfNotFound: This is a catch-all for characters listed in
      pUndesirableFileSystem or pUndesirable1st that don't have a rule in
      pChanges. pMode: This can be used to limit whether the TI looks at
      pUndesirableFileSystem or pUndesirable1st without having to delete the
      characters in those parameters."
    questions_and_answers:
      - question: What does pReplaceIfNotFound do?
        answer: pReplaceIfNotFound acts as a catch-all for characters listed in
          pUndesirableFileSystem or pUndesirable1st that don't have a rule in
          pChanges.
      - question: How does pMode affect the process?
        answer: pMode determines whether the TI checks pUndesirableFileSystem or
          pUndesirable1st without needing to delete the characters in those
          parameters.
      - question: Why would pReplaceIfNotFound be used in this process?
        answer: pReplaceIfNotFound provides substitutions for characters that are
          undesirable but don't have specific transformation rules defined in
          pChanges.
  - context: "Global Variables: StringGlobalVariable('sProcessReturnCode');
      StringGlobalVariable('sOutputString');
      NumericGlobalVariable('nProcessReturnCode'); nProcessReturnCode = 0;"
    questions_and_answers:
      - question: What are the global variables initialized in this process?
        answer: The global variables initialized include sProcessReturnCode,
          sOutputString, and nProcessReturnCode.
      - question: What is the initial value of nProcessReturnCode?
        answer: The initial value of nProcessReturnCode is set to 0.
      - question: Why are global variables used in this process?
        answer: Global variables are used to store process-wide values that can be
          accessed and modified throughout the script.
  - context: "The TI script includes validation and error handling: IF( Trim(
      pInputString ) @= ' ), nErrors = 1; For instance, if the pInputString is
      empty, it registers an error."
    questions_and_answers:
      - question: How does the script handle an empty pInputString?
        answer: The script checks if pInputString is empty, and if true, it sets nErrors
          to 1 to indicate an error.
      - question: What is the significance of error handling in this TI script?
        answer: Error handling ensures that the process reacts appropriately to invalid
          inputs and maintains robustness by setting error flags when issues are
          detected.
      - question: What happens when an error is detected in this TI script?
        answer: When an error is detected, it is logged, and the script may choose to
          quit or break the process based on the strict error handling
          configuration.
document_outline: This document outlines the Turbo Integrator process to
  validate and transform input strings based on predefined rules, highlighting
  error handling, global variables, and specific parameter functions.
document:
  repo: https://github.com/GMC2alg/bedrockti.git
  commit: 8c3ed2fbaa5674f3c984a9ed08a1c51f77c2b271
  patterns:
    - processes/}bedrock.server.util.string.validate.ti